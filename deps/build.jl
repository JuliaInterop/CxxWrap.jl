using BinaryProvider

const JLCXX_DIR = get(ENV, "JLCXX_DIR", "")
const verbose = "--verbose" in ARGS
const prefix = Prefix(JLCXX_DIR == "" ? get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")) : JLCXX_DIR)

products = Product[
    LibraryProduct(prefix, "libcxxwrap_julia", :libcxxwrap_julia)
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaInterop/libcxxwrap-julia/releases/download/v0.3.2"

# Listing of files generated by BinaryBuilder:
if VERSION == v"0.7"
    download_info = Dict(
        Windows(:i686) => ("$bin_prefix/libcxxwrap-julia-0.7.v0.3.2.i686-w64-mingw32.tar.gz", "e6e07a073187ecf11105f02db056265f20a312b138f111006e11f317c82d290a"),
        MacOS(:x86_64) => ("$bin_prefix/libcxxwrap-julia-0.7.v0.3.2.x86_64-apple-darwin14.tar.gz", "98f5042008e9706d135de9948468cd977aafd4d14c9496d8e5d9d9d7eeb972b8"),
        Linux(:x86_64, :glibc) => ("$bin_prefix/libcxxwrap-julia-0.7.v0.3.2.x86_64-linux-gnu.tar.gz", "f44ef13bf63f84502f485283e34f886b78db2d1060016cd628180f1a559f0b95"),
        Windows(:x86_64) => ("$bin_prefix/libcxxwrap-julia-0.7.v0.3.2.x86_64-w64-mingw32.tar.gz", "15f0f600acd82c8257a174187efc30d0ef174bdc3d2c3670bcbac29d5e54df81"),
    )
elseif VERSION == v"1.0"
    download_info = Dict(
        Windows(:i686) => ("$bin_prefix/libcxxwrap-julia-1.0.v0.3.2.i686-w64-mingw32.tar.gz", "a425e358fdb2d7049758dfca55ca4f698628b7d1831d424699b9bbcd9ab69dae"),
        MacOS(:x86_64) => ("$bin_prefix/libcxxwrap-julia-1.0.v0.3.2.x86_64-apple-darwin14.tar.gz", "3252a4d6bbd128225aca3b666aa9d3ea7c0a3e9b0e366ffcc5badd436faabc55"),
        Linux(:x86_64, :glibc) => ("$bin_prefix/libcxxwrap-julia-1.0.v0.3.2.x86_64-linux-gnu.tar.gz", "8b5ab1407e85f83a9fcaf22cf920660a97ea0bba1e2a6fe37320d44ea2e6fdf7"),
        Windows(:x86_64) => ("$bin_prefix/libcxxwrap-julia-1.0.v0.3.2.x86_64-w64-mingw32.tar.gz", "25d64bed0013ddcbce004b5a8dfca8c7c31da8a6a57014332d1a10affc6cd590"),
    )
else
    error("Unsupported Julia version $VERSION")
end

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
