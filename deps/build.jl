using BinaryProvider

const JLCXX_DIR = get(ENV, "JLCXX_DIR", "")
const verbose = "--verbose" in ARGS
const prefix = Prefix(JLCXX_DIR == "" ? get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")) : JLCXX_DIR)

products = Product[
    LibraryProduct(prefix, "libcxxwrap_julia", :libcxxwrap_julia)
]

supported = true

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaInterop/libcxxwrap-julia/releases/download/v0.5.3"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Windows(:i686, compiler_abi=CompilerABI(:gcc7, :cxx11)) => ("$bin_prefix/libcxxwrap-julia-1.0.v0.5.3.i686-w64-mingw32-gcc7-cxx11.tar.gz", "043f57ef849c9d18612ca3ab4b9e3a2bc78e7682e22686cd94e2a7fdfce16eed"),
    Windows(:i686, compiler_abi=CompilerABI(:gcc8, :cxx11)) => ("$bin_prefix/libcxxwrap-julia-1.0.v0.5.3.i686-w64-mingw32-gcc8-cxx11.tar.gz", "9b99940668944cda3919fab439ac3618d9f1771553b9c24e0f35e272d707d30f"),
    MacOS(:x86_64) => ("$bin_prefix/libcxxwrap-julia-1.0.v0.5.3.x86_64-apple-darwin14.tar.gz", "f8030118eac6a6e5133a5b11eeacb4799955d01078a5ced2fa44bf51b9c5f0cc"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc7, :cxx11)) => ("$bin_prefix/libcxxwrap-julia-1.0.v0.5.3.x86_64-linux-gnu-gcc7-cxx11.tar.gz", "54427b7f72da438a49c4c54898456618613939f911e121fc074fbe58adbf6119"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc8, :cxx11)) => ("$bin_prefix/libcxxwrap-julia-1.0.v0.5.3.x86_64-linux-gnu-gcc8-cxx11.tar.gz", "df6953d90503204396834d138ac93044d459f312befb2ab2219bd8217fc45314"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc7, :cxx11)) => ("$bin_prefix/libcxxwrap-julia-1.0.v0.5.3.x86_64-w64-mingw32-gcc7-cxx11.tar.gz", "c1494fbbb7128449e6d9db1b715b2116e0c191beaa9aa8ae2853cf447447d241"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc8, :cxx11)) => ("$bin_prefix/libcxxwrap-julia-1.0.v0.5.3.x86_64-w64-mingw32-gcc8-cxx11.tar.gz", "9dfd2d1729e30d09f8b7a834f8f9ee9b5a0db79b72ff181ad9e728414144e473"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
transform_platform(platform) = typeof(platform)(platform.arch;libc=platform.libc,call_abi=platform.call_abi,compiler_abi=CompilerABI(max(platform.compiler_abi.gcc_version,:gcc7),:cxx11))
transform_platform(platform::MacOS) = MacOS(:x86_64)
if JLCXX_DIR == ""
    platform = transform_platform(platform_key_abi())
    if haskey(download_info, platform)
        if !supported
            error("Julia version $VERSION is not supported for binary download. Please build libcxxwrap-julia from source and set the JLCXX_DIR environment variable to the build dir or installation prefix.")
        end
        url, tarball_hash = download_info[platform]
        if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
            # Download and install binaries
            install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose,ignore_platform=true)
        end
    elseif unsatisfied
        # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
        # Alternatively, you could attempt to install from a separate provider,
        # build from source or something even more ambitious here.
        error("Your platform $(triplet(platform)) is not supported by this package!")
    end
else
    if unsatisfied
        error("The libcxxwrap-julia library was not found in the provided JLCXX_DIR directory $JLCXX_DIR")
    end
end

write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
