using BinaryProvider

const JLCXX_DIR = get(ENV, "JLCXX_DIR", "")
const verbose = "--verbose" in ARGS
const prefix = Prefix(JLCXX_DIR == "" ? get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")) : JLCXX_DIR)

products = Product[
    LibraryProduct(prefix, "libcxxwrap_julia", :libcxxwrap_julia)
]

supported = true

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaInterop/libcxxwrap-julia/releases/download/v0.5.0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Windows(:i686, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/libcxxwrap-julia-1.0.v0.5.0.i686-w64-mingw32-gcc7.tar.gz", "5f4fe214985ef1614c97a3135c9ba8319e46678c5f2895e6ae6be81acf047112"),
    Windows(:i686, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/libcxxwrap-julia-1.0.v0.5.0.i686-w64-mingw32-gcc8.tar.gz", "40653ca3ce1bc46950c4dc9c4867d230b8f27dba1ab6f504d7f8ac1a47de9e0e"),
    MacOS(:x86_64) => ("$bin_prefix/libcxxwrap-julia-1.0.v0.5.0.x86_64-apple-darwin14.tar.gz", "d3b2ff4d31772a00cabf0d75ee1533ad99820ed57b65bfbb5dd68953c2929999"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/libcxxwrap-julia-1.0.v0.5.0.x86_64-linux-gnu-gcc7.tar.gz", "241fcb0422271aaeda7347aef8dbf6b0c683f395f4670d522d53bcad75fdb1d4"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/libcxxwrap-julia-1.0.v0.5.0.x86_64-linux-gnu-gcc8.tar.gz", "c15a4be72fffff69184e16c0e8dd3a7350b5018cfa6bd5605e14bc5af9096ca2"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/libcxxwrap-julia-1.0.v0.5.0.x86_64-w64-mingw32-gcc7.tar.gz", "d78dead3fff50956597cec350cce78b74f455259ab02f8ebe54562aa69a7174d"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/libcxxwrap-julia-1.0.v0.5.0.x86_64-w64-mingw32-gcc8.tar.gz", "948d274083a523c4132bc0ca4f61839acc52b98afeaeca30243d1321445fbfeb"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if JLCXX_DIR == ""
    if haskey(download_info, platform_key())
        if !supported
            error("Julia version $VERSION is not supported for binary download. Please build libcxxwrap-julia from source and set the JLCXX_DIR environment variable to the build dir or installation prefix.")
        end
        url, tarball_hash = download_info[platform_key()]
        if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
            # Download and install binaries
            install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
        end
    elseif unsatisfied
        # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
        # Alternatively, you could attempt to install from a separate provider,
        # build from source or something even more ambitious here.
        error("Your platform $(triplet(platform_key())) is not supported by this package!")
    end
else
    if unsatisfied
        error("The libcxxwrap-julia library was not found in the provided JLCXX_DIR directory $JLCXX_DIR")
    end
end

write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
