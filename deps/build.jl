using BinaryProvider

const JLCXX_DIR = get(ENV, "JLCXX_DIR", "")
const verbose = "--verbose" in ARGS
const prefix = Prefix(JLCXX_DIR == "" ? get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")) : JLCXX_DIR)

products = Product[
    LibraryProduct(prefix, "libcxxwrap_julia", :libcxxwrap_julia)
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaInterop/libcxxwrap-julia/releases/download/v0.3.0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Windows(:i686) => ("$bin_prefix/libcxxwrap-julia-0.7.v0.3.0.i686-w64-mingw32.tar.gz", "dda9c1db27139b6100638c7fdddffb9023a81c13c5a5619d74ac5929c5d2ab5c"),
    MacOS(:x86_64) => ("$bin_prefix/libcxxwrap-julia-0.7.v0.3.0.x86_64-apple-darwin14.tar.gz", "42e13d467749f072048a59a454e2d219bce65ffb3ee5c219ac5519914e29e865"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/libcxxwrap-julia-0.7.v0.3.0.x86_64-linux-gnu.tar.gz", "451818c2d3b3a826fc02a492df838f78873de2a13d1e474472809103b00cc858"),
    Windows(:x86_64) => ("$bin_prefix/libcxxwrap-julia-0.7.v0.3.0.x86_64-w64-mingw32.tar.gz", "1aa2425f6f8e6aab03b97f1aaf3acc3d5d8cd30f044f485c53cb2ec6829ae3fb"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
